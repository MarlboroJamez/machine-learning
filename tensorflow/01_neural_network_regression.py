# -*- coding: utf-8 -*-
"""01_neural_network_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lyxDkik2HvVfDSlMxf3JhV3-0yQm6I_T

# Introduction to Regression with Neural Networks in TensorFlow

There are many definitions for a regression problem but in our case, we're going to simplify it: predicting a numerical variable based on some other combination of variables, even shorter... predicting a number.
"""

# Import TensorFlow
import tensorflow as tf
print(tf.__version__)

"""### Creating data to view or fit"""

import numpy as np
import matplotlib.pyplot as plt

# Create features (usually uppercase X)
X = np.array([-7.0, -4.0, -1.0, 2.0, 5.0, 8.0, 11.0, 14.0])

# Create labels (usually lowercase y)
y = np.array([3.0, 6.0, 9.0, 12.0, 15.0, 18.0, 21.0, 24.0])

# Visaulise it
plt.scatter(X,y);

y == X + 10

"""# Input and Output shapes (dependent & independent)"""

# Create demo tensor for our housing price prediction problem
house_info = tf.constant(["bedroom", "bathroom", "garage"])
house_price = tf.constant([939700]
                          )
house_info, house_price



input_shape = X[0].shape
output_shape = y[0].shape

input_shape, output_shape

# Take note that this would be seen as a scalar due to 0-dimensions
X[0].ndim

# Turn our numpy arrays into tensors
X = tf.cast(tf.constant(X), dtype=tf.float32)
y = tf.cast(tf.constant(y), dtype=tf.float32)

X,y

input_shape = X[0].shape
output_shape = y[0].shape

input_shape, output_shape

plt.scatter(X, y)

"""## Steps in modelling with TensorFlow

1. ***Creating a model*** - define the input and output layers as well as the hidden layers of a deep learning model.
2. ***Compiling a model*** - define the loss function (in other words, the function which tells our model how wrong it is) and the optimizer (tells our model how to improve the patterns its learning) and evaluation metrics (what we can use to interpret the performence of our model)
3. ***Fitting a model*** - letting the model trying to find patterns between X and y (features & labels)

### Key terms
* ***sequencial API*** => groups a linear stack of layers into a tf.keras.Model, also provides training and inference (conclusion reached) features on this model
* ***tf.keras.losses.mae*** => Computes the mean absolute error between labels and predictions (how average are our predictions)
* ***mae*** => is short for mean (Avg) absolute (Positive value) error
* ***SGD*** => is short for stochastic gradient descent => It is an iterative method for optimizing an objective function with suitable smoothness properties

"""

# Setting a random seed for reproducibility
tf.random.set_seed(42)

# 1. Create a model using the 
model = tf.keras.Sequential([
  tf.keras.layers.Dense(1)
])

# 2. Compile the model
model.compile(loss=tf.keras.losses.mae, 
              optimizer=tf.keras.optimizers.SGD(),
              metrics=["mae"])

# 3. Fit the model
# model.fit(X, y, epochs=5) # this will break with TensorFlow 2.7.0+
model.fit(tf.expand_dims(X, axis=-1), y, epochs=5)

# Check out X and y
X, y

# Try and make a prediction using our model
y_pred = model.predict([17.0])
y_pred

# Looking at training output, we can see that we are 11 points off on average
y_pred + 11

"""## Improving our model for accuracy"""

